// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\x39\xaf\xb3\x38\x18\x46\x7b\x7e\xc5\xf4\x68\xc4\x92\xbd\x98\xc2\x60\x03\x66\xcb\x75\xc0\x10\xe8\x08\x10\x08\xcb\x25\x61\x33\xf0\xeb\x47\xf7\x93\x66\x91\xbe\xb7\x3c\xaf\x74\xf4\x34\xe7\xcf\x9f\x53\x90\x8e\xdd\x3f\x54\x74\xf3\xb1\x86\x55\xe0\xa3\x5f\x94\x73\x30\x56\xdf\x50\x55\x41\xc4\x54\x95\xc0\xe9\xbc\x6e\x37\xa3\x7a\xc4\xf7\x0a\xb8\x4a\x51\x7f\xca\xfa\xa5\x5f\x98\xa8\x00\x42\x35\x00\x01\x75\x6e\x98\x21\x10\xc1\x80\x10\x88\x58\x33\x72\x51\xd8\xf4\xb1\x77\xa8\x1e\xb2\xc8\x8c\x32\x75\x1d\xbf\x58\x1c\xe8\x30\xc7\xc7\x8b\x53\x11\x39\xfc\x61\xdb\x0f\xc3\xd2\xbf\xac\xfa\x4f\xc4\xfd\x63\xfa\xbf\xa8\x28\xd0\xcb\x01\xa2\xae\x7a\x1f\xdd\xc3\x8f\x1d\x24\xe8\x67\x01\x00\x7b\xac\x40\x06\x7e\xfe\x16\xe8\xb0\x02\x08\xfc\x70\x0c\x9e\xb6\xcc\x1a\x4a\x44\xd2\x3b\xaf\x6f\x68\xf6\xe6\xb3\xd5\xb2\xdd\x49\x5e\x26\x33\x7c\xa9\x79\xf9\xe1\xeb\x56\xab\xcf\x78\xe7\x9a\xc9\xd7\xc5\xf1\x5c\x20\xc3\x43\xb2\xbf\x5f\x44\x4b\x48\x27\xce\xa0\x5b\x8e\x46\xea\xf1\x25\xde\xd5\x87\xf1\xb3\xe2\xe2\x7e\x95\x92\xab\xe5\x61\x2a\xd9\xe7\xfa\xa3\xd0\xfe\x8d\x95\xa2\xe6\x73\x41\x3a\x21\x3f\xb8\xc7\xd5\xf7\xd7\x6a\xf8\x9f\x71\x90\xcc\xb4\xe7\x06\x96\x1a\xfd\xce\x5b\x13\x8d\x58\x85\x60\x94\x87\xc5\x58\x4f\xb6\xf3\xa1\x8f\x57\xcd\x9a\x10\x2a\x1a\xcd\x82\xf5\x9c\x1c\xad\xf7\xd3\x3b\x4e\xef\xb1\x33\x74\x92\x9e\x13\xab\xcf\xcd\x7b\x5e\x55\x1c\x46\x5a\x6a\x27\x84\x9f\xa1\x06\xe2\x9b\x7c\x5f\x3a\x71\x1f\x4d\x78\x21\x19\x15\x79\xf5\x6a\x27\xf5\x6e\xf2\xad\xc2\xf7\xd3\xe9\xf8\xa1\x87\x4e\x7c\xf0\xc7\xd3\x6e\xd0\x9a\xe5\x93\xbc\x8a\x48\xe4\xac\x6f\x69\x4f\xce\x81\xbd\xbd\x75\x68\xb9\x13\x72\xd5\x44\x49\x0c\x5c\xdc\x96\x2f\x0d\xe3\x2d\x65\xeb\xd5\x74\x3b\x51\x01\x97\x80\x44\xd9\xbd\x14\x67\x59\xae\xaa\xd0\x51\x0d\x6c\xc6\x9a\x8d\x39\x11\xcc\xdf\xf0\x19\x9c\xd8\xf0\xd4\x63\x5b\xd6\x53\x2b\x53\x40\xe1\x28\x00\x20\x06\x49\x64\x5a\x5d\x8c\xcb\x39\x75\x01\x41\x9a\x42\x00\x2c\x0a\xa4\x00\xfd\x41\xaf\x71\xba\x88\x8a\x10\x70\x43\xb7\x35\x4f\x63\x94\xfa\xca\x5a\x72\x71\xca\x6e\x2d\x0a\xc1\x42\xe5\xfc\xc9\xd2\x71\xc8\x4b\x8f\x0f\xfb\x77\x94\xc6\x3b\x15\x2d\xed\x89\xcd\xcd\xda\x74\x79\xf5\x5e\xa8\x2e\xf5\x60\xed\x67\xce\x3c\xf0\x39\xd5\x75\x29\x21\xcf\x5a\x6e\x33\xab\xeb\xbe\x05\x04\x8e\x82\x4e\x2f\x01\x75\x42\xd0\xb5\x41\x3a\x2c\x99\x62\xb8\xbe\x60\x1d\xb0\xd9\xbe\x3d\x62\x57\x50\x3c\xaa\x43\x73\x40\xec\xc4\x99\x29\xb9\xf5\xdb\xbc\x58\x45\x5a\x3e\xa3\x71\xb1\x29\x4d\xca\x2c\x80\xb2\x95\xd9\x25\x84\xeb\x49\x4e\x8b\xc1\xf5\xca\x56\x30\x97\x30\x32\x84\xfa\xdb\xb8\xec\x1d\xda\xe2\x65\x94\xaf\x21\x7a\x71\x92\xf2\xd5\x3d\x2d\xff\x6a\x4b\x52\x39\x1e\x45\x68\x4c\xc9\xda\x18\x91\xd1\x08\x9e\xfc\x0c\x7b\x41\x77\xbb\x75\xb6\x63\xf3\xab\xc9\x55\xc0\xf7\xc3\x95\x52\x58\xdb\xa1\x51\x0c\x5a\x5b\xa2\x8b\xc7\xb9\x1b\x63\xdd\xf1\x1e\x30\xb8\x6f\xd5\x50\x4d\x84\xcd\x54\xa4\xe5\x8c\x0e\xf2\xbd\x7b\x09\x2e\x0b\xbd\xfb\xc6\xb4\x6b\x11\x4e\xed\x9e\x31\xdb\x5d\xd9\x58\x9f\x02\xfe\x99\x1d\x6c\x3f\xbe\xf0\x13\x37\x9f\xdf\xa1\x4d\x8e\xd8\x52\xd3\xbf\xb8\x5f\x81\x22\x17\xfe\x1e\xed\xdf\x01\x00\x00\xff\xff\xc2\x6e\x07\x54\xd1\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 977, mode: os.FileMode(420), modTime: time.Unix(1540901581, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\x37\xd2\xb3\x40\xa2\x85\xe1\x9c\x55\xfc\x39\x75\x0b\x8f\x20\xb8\x41\xe3\x91\xa0\x69\x8c\x00\x91\x81\x90\xf0\xde\x08\x58\xfd\xd4\x7c\xf1\x9c\xf4\x24\x4f\xf6\xfe\xdf\x7f\x27\xa9\xba\x09\xff\x79\x3e\xf8\x87\x3c\x33\x04\x81\xfa\xef\xa1\xbe\xfe\x1e\xcc\x36\x4d\x75\x74\x4d\x09\x80\x87\x0c\x5c\x15\xf0\x0b\xc0\x05\xc6\x9f\x4d\x4f\x35\x34\xa2\x5c\x0e\x8b\x9c\x09\x79\x5c\x20\x2e\x2e\x59\x15\x0e\x45\x3f\xa4\xfb\x78\x2f\x13\x24\xc3\xcb\x8f\x6a\x8c\x08\xd4\xda\x85\x05\x1e\x6d\x1a\x91\xcb\x3b\x63\x95\x94\xcd\x94\x56\xa8\xee\x83\x0f\x39\x27\x4b\x97\xca\xd4\xae\x35\xaa\xab\xa6\xd2\xa0\x4f\xdc\x1f\x45\xf8\xe0\x7d\xf0\xba\xa3\x7e\x17\x3f\x07\xa6\x52\x21\xfd\xe2\x2e\xa1\x24\xf9\x39\x83\x7e\xfc\xb8\xd9\x86\xc4\x8b\xe4\xd2\x95\x4f\x79\x40\x07\xfb\x79\x7b\xc2\x76\x5e\x8f\x56\x67\x47\xfb\x1e\x16\x3f\x2f\x34\xc2\xf7\xae\x6f\xd5\x14\x93\xdb\x8c\x4d\x59\x2a\x1d\x8d\x81\xf4\x6a\x62\xaa\x90\x19\xd8\x53\x92\x62\x99\x6e\xd0\xfc\x3b\x5c\xfd\x99\xb7\x42\x0a\x1d\xdd\xaa\xec\xa7\x11\x42\x54\xd4\x15\x3d\xc2\x5b\x73\x0e\x2a\xc9\x58\xdb\xd4\x3a\x58\x0a\x75\x62\xdb\xc4\x9b\x94\xbc\xd3\x6e\x18\x74\x28\x8f\xe2\x47\x45\x9a\x2f\xf0\x5e\x71\xd6\x59\xa9\xb8\x5d\x11\x95\xa7\xa9\xbe\x83\xc3\x97\x6d\xc6\xb6\xeb\x2a\x48\x21\x70\x51\xf8\xd4\x8d\x10\x63\x73\x4b\x5c\x07\x96\xaa\x41\x79\xca\x91\xe7\x9f\x10\x58\xdc\x8f\xa1\x3e\x82\x65\x1c\x9d\x2f\x96\xbd\xdc\xbb\xae\xa9\x00\x17\x48\x60\x30\x25\xe0\xca\x7c\x6c\x9d\xb9\xfa\x8d\xb9\xb8\x79\x13\x58\xa2\x91\xa1\xf9\x6b\x9e\x0e\xdf\xe9\x4a\xaf\x3e\x9e\x86\x14\x94\x9e\xe7\x04\x9d\x70\xcb\x4e\xaa\xde\xd8\xa1\x98\x4e\x06\x16\x90\xff\x5e\x0c\x99\x15\x68\x77\x4a\xe5\x80\xec\x83\x22\x82\x0b\x27\x30\x8d\x72\xf0\xa3\xf9\x35\x52\xb8\x69\x93\x3e\xc8\x1a\x07\x63\x7f\xa8\x1b\xd9\x2e\x3d\x96\xeb\x2c\x8a\x71\x8b\x97\x7f\x1a\x8d\x4a\xf1\x56\xc2\x1e\x34\x8e\x62\x3b\xa4\xe2\xd7\x3d\x37\x1d\xd2\x7a\x63\x47\x3d\x93\x9d\x52\x5b\x7d\x1e\x6f\xeb\xd2\x67\xe6\xfa\x63\xd5\xed\xd8\xfd\x11\xe2\xa7\xd0\x4a\x0d\xb9\x13\x8f\xec\xc0\x09\x86\x00\xdd\xea\x4e\xa7\x71\x4c\x0d\x29\x90\x5d\xaa\xd1\x35\xe9\x04\x58\x65\x81\xfb\x31\x4a\x85\xe3\x0c\x27\x7d\xc1\x45\x80\x6e\x2b\xbe\xe6\xc9\x48\x5f\xf2\x57\x0c\xbb\x46\xb6\x3f\x79\x2b\x18\x6f\x21\x61\xbd\x45\x5f\x3b\x80\x4a\x1f\xd1\x4d\xd8\x5c\x25\xf1\xba\x55\x98\xc5\xb1\x22\x53\xda\x72\x49\xe5\xc3\x7b\x95\x15\xe5\x1e\x4d\x20\xaf\xfb\x35\xbe\xe3\x0f\xff\x03\x68\x77\xc9\xd7\x4f\x23\xd6\x59\x7f\x35\xd9\x97\x68\x4d\xa7\xac\xc4\xc4\x7f\x2f\x29\x97\x39\x99\x80\x31\xa3\xf5\xe3\xcb\xfe\x00\x83\x2e\x01\x84\xaf\xc4\xd9\xaa\xf5\xce\x73\xb7\x03\xf8\x21\x4d\x11\x48\x48\xc8\xbc\x55\x98\x8b\xd6\x15\x13\x90\xf4\x47\x1f\xf3\xa8\x11\x67\xd2\xf2\x03\xdb\x8d\x35\x4c\xe5\x7d\x7e\x10\x29\x6b\xed\xa8\x8b\x1c\x91\x4b\xd3\xaa\x43\x87\x22\x50\xa6\x57\xf2\x9a\xd5\xef\x91\x79\x3a\xb5\x94\x9e\x45\x5b\xd9\x22\xfc\x32\x5b\x8b\xab\xcf\x8c\x92\xb4\xea\xed\xb8\xd2\x09\x4c\xee\xf1\x5f\xc8\x8c\xb7\xf3\x1a\x23\x76\xe2\x3c\xcb\x9d\x45\x3d\x89\x24\x25\x66\x05\x83\x95\x48\xcf\x57\xe7\x2c\x5c\xf3\x0d\x9d\x56\x5d\x7f\xb5\x44\xa1\xcd\x08\xa9\xfd\x9f\xd8\x59\x2c\xac\x8a\xa6\xa2\xb9\x93\x63\xb1\x12\xc6\x99\x51\x15\xb5\xdb\x5f\x24\xd2\xc1\x64\x23\xda\xfb\xed\x91\x22\xe2\x89\x15\x91\xeb\x25\x72\xfe\x63\x88\xfb\x4b\x24\x83\x1f\x7d\x36\xf6\x44\x37\x89\x99\x16\x18\x7d\x71\xe8\xa1\x4d\x12\xef\xa5\x2b\x29\x30\x2c\x71\x51\x4d\x21\x12\xd2\xa5\xf0\x37\xe6\x4b\xbd\x2f\xb3\x90\x0a\xd6\x55\x20\xec\xce\x69\xdc\x9f\xea\x7b\x27\x2b\xfc\x84\xcd\x49\xac\xc3\x2d\x59\xb1\x64\x71\x04\xef\x1b\x85\xf4\x8b\x80\xb8\x27\x2f\x21\x41\x68\x2e\x1d\x52\x15\xae\x2c\x62\x4a\xcd\xd1\xc4\xb3\x56\x12\xc6\x7f\x64\x6b\xb8\xea\x10\xb8\x75\x6e\x3f\xd7\x6f\xe4\x24\x5f\x6a\xc0\xe2\xb1\x63\xa9\xcb\x00\x1e\x95\xdb\x2d\xb5\x98\x40\xed\x69\xb5\x17\x9a\x36\xed\x17\x5f\xca\xb3\xfe\x7c\x0c\x55\xc1\xec\x47\xb6\xb9\x41\xb9\xb0\x01\xfb\xdb\x57\x85\x4f\x70\x49\xfd\xca\x37\xc5\xc7\xd8\xb9\x8a\xfb\x1e\x35\x16\xe0\x2a\xb2\x65\xab\x79\x53\x72\x44\x09\x99\x77\x46\xf7\x41\x75\x83\xc0\x37\x5d\x7a\xf2\x06\x96\x2e\x47\xd4\x9c\x4f\x21\xad\x08\x79\xb4\xf4\x2e\x26\xb5\x4c\xde\x7e\x58\x11\x7d\xa3\xe9\x4e\x7b\x6f\x31\x63\x65\x7a\x3a\x93\x9e\x1d\xbf\xe5\x59\xfe\x91\xef\xf8\x1d\x96\xb4\xda\x9b\x08\xb8\x2a\x3e\x3d\x60\x8b\x43\xc0\x04\xae\x6f\x97\x59\xe4\xc3\xa0\x60\x10\xd6\xef\x95\xcf\xd8\xb4\xf6\xcc\x5b\x59\x2a\x95\xac\xad\x41\xdb\xa0\x8a\xda\xc7\xdf\xb5\x13\x08\x06\x8e\x85\xd4\xb7\xf1\xc4\x53\xd4\xe9\x93\xb7\x94\xd6\x58\x8b\xcd\x74\x19\xc8\xc8\x2e\xf5\xa1\x60\xef\xc8\x53\x9c\xc5\x1d\x44\x24\x4e\x0d\xaa\x4e\x39\xe7\x5e\x3b\x73\x1e\x31\x47\x96\x5f\xd3\x23\x62\xb2\xd8\x64\xd6\x24\xc9\xfd\x15\x1c\xbe\xca\xc8\xaf\x6f\xd4\x7d\x73\xfb\x67\x23\x6b\x99\xbb\x12\xe3\xe9\x1f\x6f\x42\x5e\x01\x83\x0e\xac\x93\xae\x43\x9a\x7b\xeb\xbd\xb4\x5d\xc2\xa1\x53\x55\xad\xa8\x7b\x37\x86\xf9\xb6\xda\x92\xf1\x1d\xf9\x59\xd6\xde\xf6\x32\x82\x03\x99\x30\x34\xd2\xe5\x4d\x61\xd3\x96\xc2\xd8\xec\xf3\x18\x82\xe0\xe3\x3b\x28\x49\x60\x5b\x3f\x7e\x68\xd6\x0a\xfa\x73\xd7\xc8\xdb\x24\xc8\x29\xa7\xe9\x1f\x7b\x15\xd3\x34\xb7\x19\x0e\x38\xa0\x6e\x6d\x2e\x1f\x3d\xe5\xc5\xdf\xb1\x60\x67\x91\xa1\x4b\xa0\x7c\x06\x61\xeb\x10\x22\xdc\x3e\x25\xe0\xbe\xb3\x8d\xda\x29\xd6\xc7\xf8\x39\x78\x37\x18\xad\x09\x7c\x05\xc8\x0b\xed\x1e\x2c\x72\xc0\x46\xea\xff\x63\x7f\x59\x51\xa1\xf2\xbf\x73\xf3\x9f\x00\x00\x00\xff\xff\xae\x57\x14\xaa\x8f\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1540901586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


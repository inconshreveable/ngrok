// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\x49\xaf\xb2\x48\x18\x46\xf7\xfc\x8a\xde\x9b\xce\x45\xc0\x8b\x2e\x7a\x51\x50\x0c\x05\x16\x5a\x82\x4c\x3b\x50\x66\x64\x50\xa0\x0a\x7e\x7d\xe7\x7e\x49\x0f\xc9\xf7\x2e\xcf\x9b\x9c\x3c\x9b\xf3\xe7\xcf\x29\x9a\x81\x9c\x3f\x54\xed\xe6\x21\x1d\xa9\xc0\xd3\x7e\x51\x0e\x23\xa4\x0e\x50\x55\x41\x44\x55\x95\xc0\x4d\x0b\x37\xd7\xae\xb3\xe0\x51\x03\x47\x29\x9a\xb1\x6c\x2a\xe3\x44\x79\x05\x90\xbb\x0e\x20\xb8\xe3\x1b\xa2\x1a\x88\xa0\x4f\x08\xd4\x68\x3b\x71\x51\xd0\xbe\x63\xf7\x50\xa7\x02\x4f\xcd\xf2\xe1\x60\xaf\x60\x18\x22\x09\xc3\x62\x8f\x37\xcc\x82\x1f\xb6\x21\xea\x6c\x40\xf8\x97\xd5\xff\x89\xb8\x7f\x4c\xff\x17\x15\x85\x56\x61\xc0\x1b\xaa\x3b\x1a\x2e\x4a\x45\x48\xb4\x9f\x05\x00\x48\x48\x81\x14\xfc\xfc\x6d\xd0\x23\x05\x10\xf5\xc8\x55\xbc\x8f\xac\x53\x55\x24\xef\xf1\xd2\x86\xd5\x3e\x2f\xf4\x2f\x95\x09\x66\x1d\xd3\x68\x18\xa5\x20\x8e\x43\x82\x77\xde\x27\x6c\xd4\xcd\xdd\x13\xe3\x3b\x6a\x6f\x77\x36\xe3\xe9\x6a\x47\xc3\x18\x53\x4e\xa2\x0b\xd9\x8c\x60\x16\x8d\xd8\x92\x17\x54\xf9\x70\xbf\xdf\xf9\x41\xce\x52\x78\x96\xf4\x2b\xcb\xd2\xe5\x0c\xbd\x47\x3b\xca\xe5\xe5\x40\xac\xf5\xf9\x0a\x55\xbb\x1a\x6c\x3c\x94\x38\x90\xef\x05\xb7\x93\x6b\x13\x69\xf5\xd8\x89\x38\x98\x1f\x81\xf2\x34\x3d\x97\x5d\x32\x32\x51\x6c\xf6\xd5\x90\x1d\x0f\xb3\x33\x04\x7c\x32\x80\x31\x00\x5d\x3e\xa3\x53\xdf\xcc\xbb\x76\x87\xa2\x2d\xfc\x96\x5a\x9e\x5b\x75\xab\x5b\xad\x23\x4e\xbe\xb3\x39\x95\xa3\x8f\xd2\x62\x23\x9e\x9b\x4d\xe2\xfb\x90\xf7\xce\x9b\x70\x5f\xf9\xeb\x50\x1d\xaa\x40\x3e\x78\x3e\xc8\x56\x6d\x75\x6c\x61\x4b\xbb\xad\x9c\x0c\xf3\xf6\xcd\xa5\x8d\xb1\xd9\x36\xc9\x3e\x49\x22\x3d\xa3\xc9\x09\x6e\x7c\x7e\xbd\x37\x37\xe1\xea\xa1\x58\x66\x52\xb7\x9f\x5b\x26\xae\x54\x5f\x6c\x9f\x1e\x9f\xf1\xbd\xf5\x76\x96\x30\x85\x38\x5e\x17\x56\x8c\x32\x17\xde\xc5\xfe\x70\x9e\x91\x70\x0b\x93\xd2\x1e\xc9\x4a\x96\x0d\x14\x58\x01\x40\xa3\x90\x44\x96\xdd\xc7\xa8\x5c\x1e\x0e\x20\x9a\xae\x10\x00\x8b\x42\x53\x00\xea\xd4\xfb\x12\x8c\x45\x7d\x30\x39\xed\x43\xdd\x99\x51\xb2\x26\xc2\x28\x1e\xe5\x47\xfd\x65\xf3\x0e\x44\x54\xf1\xd9\x12\xd7\xc3\x9b\x6d\xaf\x7a\x07\xd6\x43\xab\x4f\xf5\x44\xe3\x3c\x17\xb2\x6d\x11\x95\xa9\x3a\x4b\x4a\x66\xda\x32\xb7\x69\xfc\x22\x05\xdd\x05\x82\x04\x0a\x6a\xb3\x8f\x41\x73\xb6\x9a\xdb\xd7\x32\x95\xa4\xb3\xf2\xc1\xb0\x5a\x51\xb2\xdf\x7e\x7a\x6d\x9f\x4d\xb2\x66\xee\xc4\xae\xe8\x33\xee\x9e\xf9\x9d\xd4\x5a\xf5\xe1\x96\x44\x67\xbe\x99\xe8\xb9\x5f\xf7\xfa\xfa\x95\x9d\xab\xf2\xb6\x73\x35\xbc\x8e\xd3\x17\x3b\x7f\x8e\x0e\x93\x66\xdb\xda\x7f\xc2\xbc\x38\xd2\xee\x5c\x9d\xbe\x55\xf4\x12\x91\xf8\x30\x1d\x0d\xbd\x77\x8c\xab\x83\x5c\x4a\x83\x63\x91\xf6\x0e\xdd\xca\xc9\xec\x95\xd2\x9b\x50\x54\x2a\xcc\xd5\xfb\x8b\xf2\x82\x4a\xcb\x3f\xba\xe4\xb4\xae\x47\x25\xef\x6f\x8e\xb8\x7d\xc6\x22\x18\x21\xf1\x87\xfa\x2c\x62\x81\x13\x14\x7b\x72\x52\x85\x7a\xa2\x1b\x12\xf8\x14\x67\xe2\x3f\x3b\x21\xca\xf0\x62\x3d\x52\xe0\x4a\x49\xb6\x27\xda\x44\x8f\x42\xf0\xaa\x3c\x10\xbc\x3a\x73\x42\x86\x67\x47\x68\x75\x0f\x72\x52\xbf\x39\x53\x7a\xc8\x03\x6b\xdf\xa7\x92\xff\x8b\xfb\x15\xa8\xe6\xc0\xdf\xa3\xfd\x3b\x00\x00\xff\xff\xc4\x15\x0c\xe9\xd1\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 977, mode: os.FileMode(420), modTime: time.Unix(1540716819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb7\x12\xa3\xdc\x02\x03\xe0\x9e\xa7\xd8\x9e\xb9\x03\xd8\x84\x43\x49\xce\xc6\xe4\xd0\x61\x72\xf6\x31\x99\xa7\xbf\xb3\x5b\xff\x6a\xd5\x68\xd4\x7c\xff\xfb\x1b\x5e\x52\xb4\xd7\x1f\xd7\xe3\xfe\xbc\x5d\x2d\xe4\x7c\xe9\x8f\x21\x25\xff\x1a\xc4\xd2\x34\x69\x3e\x34\x9e\xe3\x0c\x81\x73\x24\x6e\xd7\x56\xd9\x13\xaa\x64\x56\x20\xdd\x7d\x43\x72\x8d\x49\xbe\x3a\x96\xa2\x21\x1f\xb9\x62\x64\x9b\x3c\x46\x21\x2e\xbe\x7b\x46\xa6\xb8\x05\x5f\x03\x84\xdf\x46\x3d\x08\xad\x4f\x67\xfa\xd7\x68\x64\x63\x6e\x5b\x26\x6e\x9d\xc3\x6f\x3d\x47\xaf\x64\x2e\x6d\x70\xd8\xa2\x1a\xc2\x09\x44\xc7\x85\xf2\x3e\x88\x47\xe6\x3a\xf0\xa7\x9e\x6d\xa4\xbf\x05\x02\x92\x4f\xe9\x70\xb4\x33\xf4\x3a\x23\xf1\xe5\x8d\xd0\xde\x1b\x79\x5e\xbc\x46\x7f\xd9\x5b\xfe\x4d\x72\x1d\xbb\x38\xbe\xf8\x53\x6f\xe6\x22\x4f\x6b\x30\xde\xed\x4f\x97\x85\xab\x02\x1d\x63\xa8\xf5\x27\xc2\xb4\xef\x4c\x37\xf7\x6f\xd5\x2a\x16\x81\x6e\x7a\x61\x35\x5e\x0a\xda\x4a\x54\xb6\xe9\x37\xa2\x0f\x93\x4b\x7d\x7e\xfc\x7c\x2d\xf4\x65\xc8\xac\x74\x01\x76\xb0\x56\x91\x4e\xb6\x64\xd8\xd0\x80\x70\x10\x75\x69\xac\xce\x5b\x97\x07\x05\xc8\x8f\xdb\xe0\xe5\x48\xf1\xcb\xd5\xf6\xea\x4f\x19\x37\x35\x32\xfd\xb0\x2f\xd4\x9b\xd0\xa5\xa2\xc3\x2f\xa5\x04\xa5\xce\x7e\xbe\x79\x01\x16\xfe\x73\x0d\xf9\x5b\x45\xa2\x50\x0f\xb0\xb6\xf8\x85\xb7\x92\xff\x40\x62\x6c\x04\xf1\xa2\x6d\x8f\x69\x5f\x7d\xf8\x98\x3d\xd8\x5b\xbd\x09\x0e\x4d\xe4\x1c\x8e\xe7\x66\x8d\xe7\x64\x3b\x8b\xf3\x99\xe0\xde\x11\xf7\x2c\x79\x11\x99\xce\x8c\x51\xed\x0c\xd4\x47\x69\xc5\x04\x83\xd2\x39\x04\xa3\x15\xbd\xaa\x40\x6c\xed\x3e\x55\x3e\x46\x75\x63\x8d\x4d\xb4\xfd\x53\x51\xbf\x67\x0a\x9d\x9d\x4d\x82\xbd\x1e\xc6\x44\x15\x2d\xd7\x47\x70\xa0\xad\x9a\x62\x77\x15\x53\x2f\x8c\x75\xd0\x91\x4a\x2b\x87\x60\x10\x69\x6c\xc0\xb3\x5b\xc2\xd6\x75\x39\x8b\xf9\x50\xdc\x03\x35\x75\x10\x04\xb2\xd7\x95\x6c\x7c\x3c\x72\x9d\x26\xf7\x60\x6b\x91\x8f\x1c\xd9\x78\x4d\xdd\x6d\x00\x51\x05\x8b\xbd\x6e\x02\x37\xd6\x28\x00\x33\x6b\x05\x86\x15\x89\xfb\x91\x52\xdf\xa0\xc7\x3e\x4b\x2d\xd4\xfc\x3c\x5c\x64\x9d\xc5\x36\x13\x0e\xa9\x64\x98\x07\x8d\xe4\xa3\x22\x92\xc3\x2e\x90\xe5\x52\x24\x9b\x30\x2c\x02\xbb\xcf\x9e\x23\x1b\x45\xfc\xe4\xe6\x94\xad\xda\x34\xe9\xb0\xb3\xc7\x8c\x30\x8c\x05\xd7\xcd\xaa\x68\x17\x07\x34\x9d\xa6\x51\xab\xf4\xab\x40\x6a\x53\xec\xe0\x2c\xb0\xeb\x43\x8d\xce\xa2\x23\x9e\x62\xd2\xfa\x4f\xf4\x77\x72\x89\x18\x90\xaf\x3d\x95\xdd\xaf\x94\x9b\x5d\x9b\xce\xa7\xc1\xb0\xf3\x59\xee\xb1\x9f\x0a\xa8\x75\xa7\x0e\x21\x89\x19\x12\xa2\xf9\x21\xb6\x92\x50\x27\x12\x07\x98\x82\xb2\xd3\xc7\x58\x4e\xa0\xb9\x7f\x2b\x88\xa3\x01\x2b\x6c\x8e\xf8\x06\xe7\xae\x41\xbc\x25\x08\xaf\x82\x84\xbb\x33\x27\xc8\x5f\x4c\x97\x97\x42\x33\xfe\xfd\xa0\x9f\xfc\x15\x68\xe4\x5d\x1e\x37\x0f\xf1\x7e\x7b\xaa\x23\x59\xc6\xbe\x7f\x4b\x15\x3e\x45\x09\x35\xd8\x99\x86\x95\xfd\x4d\x0e\xbd\x11\xec\x98\x0f\x98\x02\x2e\x78\x98\xff\x1a\x02\x33\x10\x96\x0a\xf2\x42\xff\x70\x23\xbc\xf6\x4d\x67\xb3\x8a\xb3\x32\x19\x2e\x89\xca\xba\x4c\x6a\xb0\xc4\x92\x17\x28\x34\xb2\x80\x76\xa2\x52\xdf\xfd\x08\x94\xfb\x05\x1b\xfc\xdf\xe2\xb3\xde\x0f\xc4\x08\xef\xdc\x43\x13\xea\x87\xae\x85\xad\x1a\xcc\x35\xc7\xca\xb3\xf8\xc8\x4e\x3f\x40\x5f\xee\x83\x9c\xd0\xad\x9f\x19\x68\x4e\xf2\x62\x13\x45\x2d\xb8\x06\x53\x9a\xdb\x34\x39\x67\xae\x53\x97\x09\x10\xdd\xde\xd9\xf3\x41\xf9\x73\x89\x82\x0d\x4d\xfd\xcf\xb2\xe9\x3d\xd0\x03\xc2\x68\x46\x1e\x96\x45\x4c\xbf\x2e\x88\x26\x5f\xef\x5b\xdb\x86\xb0\x56\x7e\xc5\x0e\x3f\x2f\x9c\xf7\x68\x77\xdd\xd3\xdf\x91\xe3\xa2\xb2\xc1\x94\x12\xe2\xe8\x4b\xa7\x16\xe7\xe6\xd7\x30\xcf\xd7\x1b\xb8\x43\xd8\xde\x86\xb2\x9d\x29\x27\x5a\x01\x10\xea\x84\xd7\x9b\x46\xa2\xac\x67\x8f\xef\x81\x4d\xaf\x01\x33\xe7\xc4\x7c\x23\xa6\x77\x35\xb4\xea\xb4\xc3\xc6\x18\xcf\x60\x84\xc2\x5d\x87\xb5\xa2\x4d\x64\x30\xeb\x30\xa7\xf0\xa4\x8f\x0b\x36\xb0\x62\x61\x1a\xd6\xfe\xa4\x1f\x87\xf6\x51\x08\x79\xdb\x7e\xe6\xd8\xad\x46\x4a\x21\xd1\xce\xcc\xf0\xba\xdd\x77\x12\x4a\xec\xc3\x2a\xe7\x9c\x99\x79\xc8\x66\x2a\x8f\x7b\xf3\xce\xb3\xfe\xb8\x95\x2f\xbd\x21\x03\x97\x0a\x69\x2f\xd0\xb8\x69\x7b\x45\x9e\x1e\x61\x68\x1d\xe2\x76\x20\x23\x0b\xe6\x96\xec\x77\x7e\xde\x2d\x6e\x63\x29\x17\xed\x99\x51\x17\x8e\xc1\xd7\x92\x1c\x99\xf6\x31\xe7\x94\xd4\xc2\xfa\xb5\x4c\x9f\x4d\x58\xe7\xcd\xa1\x5f\x6f\x59\xe0\xef\xca\x4d\xd8\xbc\xe7\xd0\x0a\xf9\xb6\x89\x63\x3e\xb4\x70\x15\x12\x8a\x3b\xa2\x33\xc6\x5a\xb2\xe2\x61\xbb\xa4\xac\xb1\x46\x4d\x4e\x2d\xb6\x3c\x84\x95\x12\x9a\x6d\xb0\x1d\x18\x1f\x2b\x1d\x46\xc2\xec\x7b\x81\x5c\x72\xee\xd9\x44\xd4\xa0\xbd\x6e\x07\x9a\x20\x2d\x71\xec\x61\x4d\x22\x0a\xc8\xd2\xa7\xad\x55\x09\x45\xb6\x1a\xbf\xb9\x48\x63\xf8\x90\x47\x4c\xad\xd8\x85\x57\x4b\x60\xe7\xca\x96\xfc\x05\xd3\xf7\x5a\xd9\x19\x05\x08\x26\x08\x13\x37\x2b\x3c\xa7\xd1\x80\x7c\x6e\x45\x1d\x79\xd9\x84\xbd\xac\xfb\x0d\x4d\x30\x7d\x32\x9b\x10\x1e\x07\xdc\x86\x34\x18\xf6\x9e\x56\x72\xd6\x1b\x44\xbb\x99\x6c\x8e\xc7\x59\xd1\x18\x5d\xa4\xca\xca\x50\xb0\x1d\x6d\xfb\xf0\x25\x1e\x99\x5b\x37\x7e\x70\x76\x73\x7a\x3e\x9f\x64\x2d\xb6\xdb\xeb\x61\x95\x09\x69\x4d\x3b\xfa\x0b\x87\x4e\x98\x45\x78\x8f\x40\x2b\x6c\xea\x1d\x7e\x63\x6b\x5a\x11\xe7\x52\xf2\x47\x18\xa1\xfe\xe1\x9f\xed\x0f\xe0\x43\x6a\x08\xdd\xc9\x97\x45\xd3\x6b\xf0\x7e\x96\xcf\x53\xd3\x22\xdd\x80\x53\x6a\x7e\xb3\xf9\x7a\xaa\x6a\x7f\x21\xff\x48\x91\x5e\xe2\x7f\x53\xf3\xff\x00\x00\x00\xff\xff\xcd\xcb\xd1\xc3\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1540716826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

